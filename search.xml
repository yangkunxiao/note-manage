<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>php和mySql</title>
      <link href="/2019/11/12/php/mysql/"/>
      <url>/2019/11/12/php/mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>通过PHP，开发者可以和数据库相连。<br>在PHP5.0版本以后，官方推荐一下两种方式进行PHP和数据库的连接：</p><ul><li>MySQLi extension (“i” 意为 improved)：MySQLi 只针对 MySQL 数据库</li><li>PDO (PHP Data Objects)：PDO 应用在 12 种不同数据库中<br>因为我这里只安装了mySql，所以本文栗子均以第一种方式进行操作。</li></ul><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>在访问数据库之前，我们需要进行数据库的连接</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$serverName</span> <span class="token operator">=</span> <span class="token string">'localhost'</span><span class="token punctuation">;</span>//数据库地址<span class="token variable">$serverRoot</span> <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>//数据库登录名称<span class="token variable">$passWord</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>//数据库密码<span class="token variable">$dbName</span> <span class="token operator">=</span> <span class="token string">"myDB"</span><span class="token punctuation">;</span><span class="token variable">$conn</span> <span class="token operator">=</span> new mysqli<span class="token punctuation">(</span><span class="token variable">$serverName</span>,<span class="token variable">$userName</span>,<span class="token variable">$userPassword</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//连接失败if<span class="token punctuation">(</span><span class="token variable">$conn</span>-<span class="token operator">></span>connect_error<span class="token punctuation">)</span><span class="token punctuation">{</span>    die<span class="token punctuation">(</span><span class="token string">"数据库连接失败："</span><span class="token keyword">.</span><span class="token variable">$conn</span>-<span class="token operator">></span>connect_error<span class="token punctuation">)</span><span class="token punctuation">}</span>mysqli_set_charset<span class="token punctuation">(</span><span class="token variable">$this</span>-<span class="token operator">></span>conn, <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//设置字符编码为utf8格式 否则汉字可能出现乱码的情况//数据库操作完成之后 一定记得关闭数据库的连接<span class="token variable">$conn</span>-<span class="token operator">></span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><p>1、创建数据库：<code>$sql = &quot;CREATE DATABASE IF NOT EXISTS dbname&quot;</code><br>2、创建表：上面的连接语句要修改下，加个参数，用来选择数据库：</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$conn</span> <span class="token operator">=</span> new mysqli<span class="token punctuation">(</span><span class="token variable">$serverName</span>,<span class="token variable">$userName</span>,<span class="token variable">$userPassword</span>,<span class="token variable">$dbName</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"CREATE TABLE MyGuests (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, firstname VARCHAR(30) NOT NULL,lastname VARCHAR(30) NOT NULL,email VARCHAR(50),reg_date TIMESTAMP)"</span><span class="token punctuation">;</span></code></pre><p>属性说明：</p><ul><li>NOT NULL - 每一行都必须含有值（不能为空），null 值是不允许的。</li><li>DEFAULT value - 设置默认值</li><li>UNSIGNED - 使用无符号数值类型，0 及正数</li><li>AUTO INCREMENT - 设置 MySQL 字段的值在新增记录时每次自动增长 1</li><li>PRIMARY KEY - 设置数据表中每条记录的唯一标识。 通常列的 PRIMARY KEY 设置为 ID 数值，与 AUTO_INCREMENT 一起使用。<br>每个表都应该有一个主键(本列为 “id” 列)，主键必须包含唯一的值</li></ul><p>3、插入数据：<code>$sql=&#39;INSERT INTO table_name (column1, column2, column3,...)VALUES (value1, value2, value3,...)&#39;</code><br>4、插入多条数据：</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO student (column1, column2, column3,...)VALUES (value1, value2, value3,...);"</span><span class="token punctuation">;</span><span class="token variable">$sql</span>.<span class="token operator">=</span><span class="token string">"INSERT INTO student (column1, column2, column3,...)VALUES (value1, value2, value3,...);"</span><span class="token punctuation">;</span><span class="token variable">$sql</span>.<span class="token operator">=</span><span class="token string">"INSERT INTO student (column1, column2, column3,...)VALUES (value1, value2, value3,...);"</span><span class="token punctuation">;</span></code></pre><p>注意：sql语句之间用;隔开</p><p>5、查询数据：<code>$sql = &#39;SELECT * FROM  myDB;&#39;</code><br>6、更新数据：<br><code>UPDATE table_nameSET column1=value, column2=value2,...WHERE some_column=some_value</code><br>7、删除数据：<code>DELETE FROM table_nameWHERE some_column = some_value</code></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> mySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> mySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2019/11/11/hexo/index/"/>
      <url>/2019/11/11/hexo/index/</url>
      
        <content type="html"><![CDATA[<h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li><p>Node（本文不做多余叙述）</p></li><li><p>Git（本文不做多余叙述）</p></li><li><p>Hexo<br><code>$ npm install -g hexo-cli</code><br>安装完成后，到一个新的文件夹下，打开Git Bash，执行一下命令：</p><pre><code>$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</code></pre><p>新建完成之后，打开新建的项目，查看项目目录：</p></li><li><p>public：执行hexo generate命令，生成的HTML静态文件</p></li><li><p>scaffolds：模版文件夹</p></li><li><p>source：资源文件夹，文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里</p><ul><li>_data：你的数据文件夹，例如：<ul><li>friends.json：存放友情链接的数据</li><li>musics.json：存放音乐播放器的数据</li></ul></li><li>_posts：文章存放文件夹</li><li>categories：分类</li><li>tags：标签<ul><li>thems：主题文件夹，Hexo 会根据主题来生成静态页面。以我当前使用的metery主题为例</li><li>langauages：存放语言相关设置的yml文件</li><li>layout：存放文章的ejs模版，可以在里面修改相关的HTML、CSS、JS等</li><li>source：该主题下使用的资源文件夹</li><li>_config.yml：该主题的配置文件</li></ul></li></ul></li></ul><ul><li>_config.yml：该项目的配置文件</li><li>db.json：source解析所得到的</li><li>package.json：项目所需模块项目的配置信息</li></ul><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><ul><li>GitHub上新建一个项目</li><li>本地Git Bash上配置github账户信息<ul><li><code>git config --global user.name &#39;yourName&#39;</code></li><li><code>git config --global user.email &#39;yourEmail&#39;</code><ul><li>创建SSH</li><li>在gitbash中输入：</li><li><code>ssh-keygen -t rsa -C &quot;youremail@example.com</code>，生成ssh。</li><li><code>cd ~/.ssh</code> 找到id_rsa.pub</li><li><code>cat id_rsa.pub</code>复制其中的内容到github上，创建一个新的 SSH KEY</li></ul></li></ul></li></ul><ul><li>修改_config.yml<pre><code>deploy:type: gitrepo: https://github.com/YourgithubName/YourgithubName.github.io.gitbranch: master</code></pre></li><li>回到Git Bash<pre><code>npm i hexo-serverhexo cleanhexo generatehexo server</code></pre></li><li>上传到GitHub<pre><code>npm install hexo-deployer-git --savehexo cleanhexo generatehexo deploy</code></pre>注意deploy的过程中要输入你的username及passward。<br>然后在浏览器中输入 <a href="http://yourgithubname.github.io" target="_blank" rel="noopener">http://yourgithubname.github.io</a> 就可以看到你的个人博客。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客主题-Metery</title>
      <link href="/2019/11/11/hexo/meteryThems/"/>
      <url>/2019/11/11/hexo/meteryThems/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php基础</title>
      <link href="/2019/11/11/php/base/"/>
      <url>/2019/11/11/php/base/</url>
      
        <content type="html"><![CDATA[<h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><p>（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。</p><h4 id="PHP的作用"><a href="#PHP的作用" class="headerlink" title="PHP的作用"></a>PHP的作用</h4><ul><li>PHP 可以生成动态页面内容</li><li>PHP 可以创建、打开、读取、写入、关闭服务器上的文件<ul><li>PHP 可以收集表单数据</li><li>PHP 可以发送和接收 cookies</li><li>PHP 可以添加、删除、修改您的数据库中的数据</li><li>PHP 可以限制用户访问您的网站上的一些页面</li><li>PHP 可以加密数据</li></ul></li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><pre><code>&lt;?php    $x=5;    $y=6;    $z=$x+$y;    echo $z;?&gt;</code></pre><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p>PHP有四种不同的变量作用域：</p><ul><li>local：局部作用域。在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问</li><li>global：全局作用域。在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</li><li>static：当一个函数完成时，它的所有变量通常都会被删除。然而，有时候我们希望某个局部变量不要被删除，可以使用static</li><li>parameter：参数作用域。参数是通过调用代码将值传递给函数的局部变量。参数是在参数列表中声明的，作为函数声明的一部分</li></ul><h4 id="局部和全局作用域"><a href="#局部和全局作用域" class="headerlink" title="局部和全局作用域"></a>局部和全局作用域</h4><pre><code>$x = 5;//全局变量function test(){    global $x;//使用global关键字 使用全局变量    static $n = 0;//局部变量    $y = 10;//局部变量    $n++;    echo &#39;x: &#39;.$x.&#39;&lt;br/&gt;&#39;;    echo &#39;y: &#39;.$y.&#39;&lt;br/&gt;&#39;;    echo $n.&#39;&lt;br /&gt;&#39;;};test();test();test();</code></pre><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>常量值被定义后，在脚本的其他任何地方都不能被改变。常量是一个简单值的标识符。该值在脚本中不能改变。<br>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。<br>设置常量，使用 define() 函数，函数语法如下：</p><blockquote><p>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )<br>该函数有三个参数:</p></blockquote><ul><li>name：必选参数，常量名称，即标志符</li><li>value：必选参数，常量的值</li><li>case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的</li></ul><pre><code>&lt;?phpdefine(&quot;GREETING&quot;, &quot;欢迎访问 Runoob.com&quot;);echo GREETING;    // 输出 &quot;欢迎访问 Runoob.com&quot;echo &#39;&lt;br&gt;&#39;;echo greeting;   // 输出 &quot;greeting&quot;?&gt;</code></pre><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul><li>字符串</li><li>整型：整数是一个没有小数的数字</li><li>浮点型：浮点数是带小数部分的数字，或是指数形式。</li><li>布尔型</li><li>数组</li><li>对象：在 PHP 中，对象必须声明。首先，你必须使用class关键字声明类对象。类是可以包含属性和方法的结构。然后我们在类中定义数据类型，然后在实例化的类中使用数据类型</li><li>NULL</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
